                        1) strigngs in python


Q1. Write all the conventions being followed while declaring a variable.
Ans:-
        A Python variable name must start with a letter or the underscore  character.
     A Python variable name cannot start with a number.
     A Python variable name can only contain alpha-numeric characters       and underscores (A-
z, 0-9, and _ ).
Variable in Python names are case-sensitive (name, Name, and NAME are three different 
variables).
The keyword in Python cannot be used to name the variable in Python.

Q2. What will happen if we declare a restricted keyword as a variable?
Ans:-

This is going to produce error when you trynna to assign value 
It makes the compiler's life hard. If keywords were allowed as variable names, it would be very 
hard to tell (for the developers and the compilers) whether something was a variable or a keyword


Q3. Can we actually declare a string as a variable name?
Ans:-

* Declaring strings as variables can make it easier for us to work with strings throughout our 
Python programs
we can alse convert variable name into the string by using (f string)
for eg:- name="shailesh"
	   age=19
         print(f"{name} is {age} years old")
*by using globals() or locals() function, we can change the string into a variable name and assign a 
value to it.
variable names and the objects they point to are typically stored in a Python dictionary; the very 
same data structure that you can use when writing Python code. When you write x = 5 , the name 
x is set as a key in the dictionary of global names with 5 as the corresponding value

Q4. Is it possible for us to declare "_" as a variable? If so, then write an example of it.
Ans:-

Using underscore in a variable like first_name is still valid. But using "_" alone as a variable name is 
no more valid in other languages but in python it is valid to use "_" alone as variable.
*identifier, so it can be used as a variable name. According to Python doc, the special identifier _ is 
used in the interactive interpreter to store the result of the last evaluation. It is stored in the builtin 
module
*The python interpreter stores the last expression value to the special variable called _.
>>> 10 
	10

	>>> _ 
	10

	>>> _ * 3 
	30
*The underscore _ is also used for ignoring the specific values. If you don't need the specific values 
or the values are not used, just assign the values to underscore.
	x, _, y = (1, 2, 3)

	>>> x
	1

	>>> y 
*	3


Q5. Using an example, explain how the variables in python are dynamic in nature.
Ans:-

*initializing a string value to an int variable is not allowed and the program will not compile.But 
Python is a dynamically typed language. It doesn't know about the type of the variable until the code 
is run. So declaration is of no use. What it does is, It stores that value at some memory location and 
then binds that variable name to that memory container.
it will get to know the type of the value at run-time.
For eg:-		
	# This will store 6 in the memory and binds the
	# name x to it. After it runs, type of x will
	# be int.
	x = 6     
	print(type(x))
	# This will store 'hello' at some location int 
	# the memory and binds name x to it. After it
	# runs type of x will be str.
	x = 'hello' 
              print(type(x))

 




